/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-05-11 10:21:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class userInfoUpdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("<title>회원정보 수정</title>\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"front/common.css\">\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"front/bootstrap.css\">\n");
      out.write("	<script\n");
      out.write("	src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<div class=\"container\">\n");
      out.write("		<h4>회원정보수정</h4>\n");
      out.write("		<hr>\n");
      out.write("	</div>\n");
      out.write("	<div class=\"container\">\n");
      out.write("		<form action=\"userUpdateAction\">\n");
      out.write("			<table>\n");
      out.write("				<tr>\n");
      out.write("					<td><span class=\"tab_span\">이름</span></td>\n");
      out.write("					<td><input type=\"text\" name=\"user_name\" placeholder=\"고정값입니다.\"></td>\n");
      out.write("				</tr>\n");
      out.write("				<tr>\n");
      out.write("					<td><span class=\"tab_span\">비밀번호</span></td>\n");
      out.write("					<td><input type=\"password\" name=\"user_pw\"\n");
      out.write("						placeholder=\"영문 숫자 조합으로 최대 8자 입력해주세요.\"></td>\n");
      out.write("				</tr>\n");
      out.write("				<tr>\n");
      out.write("					<td><span class=\"tab_span\">비밀번호 확인</span></td>\n");
      out.write("					<td><input type=\"password\" \n");
      out.write("						placeholder=\"비밀번호를 재입력해주세요\"></td>\n");
      out.write("				</tr>\n");
      out.write("				<tr>\n");
      out.write("					<td><span class=\"tab_span\">주소</span></td>\n");
      out.write("					<td><input type=\"text\" id=\"sample4_postcode\"\n");
      out.write("						placeholder=\"우편번호\" name=\"user_addr1\"\n");
      out.write("						style=\"border-bottom: 2px solid black; margin-bottom: 20px;\"\n");
      out.write("						required> <input type=\"button\"\n");
      out.write("						onclick=\"sample4_execDaumPostcode()\" value=\"우편번호 찾기\" name=\"M_ADDR\"\n");
      out.write("						style=\"color: white; background: #3B4A71; border-radius: 0.3em;\"><br>\n");
      out.write("						<input type=\"text\" id=\"sample4_roadAddress\" placeholder=\"도로명주소\"\n");
      out.write("						name=\"user_addr2\"\n");
      out.write("						style=\"border-bottom: 2px solid black; margin-bottom: 20px;\">\n");
      out.write("						<input type=\"text\" id=\"sample4_jibunAddress\" placeholder=\"지번주소\"\n");
      out.write("						name=\"user_addr3\"\n");
      out.write("						style=\"border-bottom: 2px solid black; margin-bottom: 20px;\">\n");
      out.write("						<span id=\"guide\" style=\"color: #999; display: none\"></span> <input\n");
      out.write("						type=\"text\" id=\"sample4_detailAddress\" placeholder=\"상세주소\"\n");
      out.write("						name=\"user_addr4\"\n");
      out.write("						style=\"border-bottom: 2px solid black; margin-bottom: 20px;\">\n");
      out.write("						<input type=\"text\" id=\"sample4_extraAddress\" placeholder=\"참고항목\"\n");
      out.write("						style=\"border-bottom: 2px solid black; margin-bottom: 20px;\"></td>\n");
      out.write("				</tr>\n");
      out.write("				<tr>\n");
      out.write("					<td><span class=\"tab_span\">핸드폰번호</span></td>\n");
      out.write("					<td><span>핸드폰 번호를 입력해주세요.</span> <br> <input type=\"text\"\n");
      out.write("						placeholder=\"인증번호 입력\" name=\"user_tel\">\n");
      out.write("						<button type=\"button\">인증번호 발송</button></td>\n");
      out.write("				</tr>\n");
      out.write("				<tr>\n");
      out.write("					<td><span class=\"tab_span\">이메일</span></td>\n");
      out.write("					<td><input type=\"text\" name=\"user_email\"\n");
      out.write("						placeholder=\"이메일을 입력해주세요\"></td>\n");
      out.write("\n");
      out.write("				</tr>\n");
      out.write("\n");
      out.write("\n");
      out.write("			</table>\n");
      out.write("			<br>\n");
      out.write("			<button type=\"submit\">수정완료</button>\n");
      out.write("			<button type=\"button\" onclick=\"location.href='userDeleteAction'\">회원탈퇴</button>\n");
      out.write("			</form>\n");
      out.write("	</div>\n");
      out.write("	\n");
      out.write("\n");
      out.write("	<script>\n");
      out.write("		//본 예제에서는 도로명 주소 표기 방식에 대한 법령에 따라, 내려오는 데이터를 조합하여 올바른 주소를 구성하는 방법을 설명합니다.\n");
      out.write("		function sample4_execDaumPostcode() {\n");
      out.write("			new daum.Postcode(\n");
      out.write("					{\n");
      out.write("						oncomplete : function(data) {\n");
      out.write("							// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\n");
      out.write("							// 도로명 주소의 노출 규칙에 따라 주소를 표시한다.\n");
      out.write("							// 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\n");
      out.write("							var roadAddr = data.roadAddress; // 도로명 주소 변수\n");
      out.write("							var extraRoadAddr = ''; // 참고 항목 변수\n");
      out.write("							// 법정동명이 있을 경우 추가한다. (법정리는 제외)\n");
      out.write("							// 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\n");
      out.write("							if (data.bname !== ''\n");
      out.write("									&& /[동|로|가]$/g.test(data.bname)) {\n");
      out.write("								extraRoadAddr += data.bname;\n");
      out.write("							}\n");
      out.write("							// 건물명이 있고, 공동주택일 경우 추가한다.\n");
      out.write("							if (data.buildingName !== ''\n");
      out.write("									&& data.apartment === 'Y') {\n");
      out.write("								extraRoadAddr += (extraRoadAddr !== '' ? ', '\n");
      out.write("										+ data.buildingName : data.buildingName);\n");
      out.write("							}\n");
      out.write("							// 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\n");
      out.write("							if (extraRoadAddr !== '') {\n");
      out.write("								extraRoadAddr = ' (' + extraRoadAddr + ')';\n");
      out.write("							}\n");
      out.write("							// 우편번호와 주소 정보를 해당 필드에 넣는다.\n");
      out.write("							document.getElementById('sample4_postcode').value = data.zonecode;\n");
      out.write("							document.getElementById(\"sample4_roadAddress\").value = roadAddr;\n");
      out.write("							document.getElementById(\"sample4_jibunAddress\").value = data.jibunAddress;\n");
      out.write("\n");
      out.write("							// 참고항목 문자열이 있을 경우 해당 필드에 넣는다.\n");
      out.write("							if (roadAddr !== '') {\n");
      out.write("								document.getElementById(\"sample4_extraAddress\").value = extraRoadAddr;\n");
      out.write("							} else {\n");
      out.write("								document.getElementById(\"sample4_extraAddress\").value = '';\n");
      out.write("							}\n");
      out.write("							var guideTextBox = document.getElementById(\"guide\");\n");
      out.write("							// 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.\n");
      out.write("							if (data.autoRoadAddress) {\n");
      out.write("								var expRoadAddr = data.autoRoadAddress\n");
      out.write("										+ extraRoadAddr;\n");
      out.write("								guideTextBox.innerHTML = '(예상 도로명 주소 : '\n");
      out.write("										+ expRoadAddr + ')';\n");
      out.write("								guideTextBox.style.display = 'block';\n");
      out.write("							} else if (data.autoJibunAddress) {\n");
      out.write("								var expJibunAddr = data.autoJibunAddress;\n");
      out.write("								guideTextBox.innerHTML = '(예상 지번 주소 : '\n");
      out.write("										+ expJibunAddr + ')';\n");
      out.write("								guideTextBox.style.display = 'block';\n");
      out.write("							} else {\n");
      out.write("								guideTextBox.innerHTML = '';\n");
      out.write("								guideTextBox.style.display = 'none';\n");
      out.write("							}\n");
      out.write("						}\n");
      out.write("					}).open();\n");
      out.write("		}\n");
      out.write("	</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
