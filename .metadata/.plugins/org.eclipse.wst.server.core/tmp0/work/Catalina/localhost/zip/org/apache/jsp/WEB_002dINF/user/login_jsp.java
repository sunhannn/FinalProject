/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-05-09 06:43:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("	src=\"https://developers.kakao.com/sdk/js/kakao.min.js\" charset=\"utf-8\"></script>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"jumbotron\">\r\n");
      out.write("		<h1>로그인</h1>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<div class=\"container\" align=\"center\">\r\n");
      out.write("		<div class=\"col-md-4 col-md-offset-4\">\r\n");
      out.write("			<h3 class=\"form-signin-heading\">로그인</h3>\r\n");
      out.write("			");

			if (request.getParameter("error") != null) {
				out.println("<div class='alert alert-danger'>");
				out.println("아이디와 비밀번호를 확인해 주세요");
				out.println("</div>");
			}
			
      out.write("\r\n");
      out.write("			<form class=\"form-signin\" action=\"/login\" method=\"post\">\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"inputUserName\" class=\"sr-only\">User Name</label> <input\r\n");
      out.write("						type=\"text\" class=\"form-control\" placeholder=\"ID\" name=\"user_id\"\r\n");
      out.write("						value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" required autofocus>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"inputPassword\" class=\"sr-only\">Password</label> <input\r\n");
      out.write("						type=\"password\" class=\"form-control\" placeholder=\"Password\"\r\n");
      out.write("						name=\"user_pw\" required>\r\n");
      out.write("				</div>\r\n");
      out.write("				<button class=\"btn btn btn-lg btn-success btn-block\" id=\"login\"\r\n");
      out.write("					type=\"submit\">로그인</button>\r\n");
      out.write("				<button class=\"btn btn btn-lg btn-success btn-block\"\r\n");
      out.write("					onclick=\"agreementBtn()\" type=\"button\">회원가입</button>\r\n");
      out.write("				<button type=\"button\" onclick=\"loginWithKakao()\">카카오 로그인</button>\r\n");
      out.write("			</form>\r\n");
      out.write("			<a href=\"find?find=id\">아이디찾기</a> <a href=\"find?find=pw\">비밀번호찾기</a>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		//회원가입 페이지 이동\r\n");
      out.write("		function agreementBtn() {\r\n");
      out.write("			document.location = \"agreementBtn\";\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		//초기화 시키기. \r\n");
      out.write("		$(document).ready(function() {\r\n");
      out.write("			Kakao.init('e249d8f9f86e7dc7235a6fdf46fcc2f2');\r\n");
      out.write("			console.log(Kakao.isInitialized());\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		//카카오서버에 로그인\r\n");
      out.write("		function loginWithKakao() {\r\n");
      out.write("			Kakao.Auth.login({\r\n");
      out.write("				success : function(response) {\r\n");
      out.write("					Kakao.API.request({\r\n");
      out.write("						url : '/v2/user/me',\r\n");
      out.write("						success : function(response) {\r\n");
      out.write("							let mail = response.kakao_account.email;\r\n");
      out.write("							console.log(\"mail : \", mail);\r\n");
      out.write("\r\n");
      out.write("							checked = mailCheck(mail);\r\n");
      out.write("\r\n");
      out.write("						},\r\n");
      out.write("						fail : function(error) {\r\n");
      out.write("							console.log(error)\r\n");
      out.write("						},\r\n");
      out.write("					})\r\n");
      out.write("				},\r\n");
      out.write("				fail : function(error) {\r\n");
      out.write("					console.log(error)\r\n");
      out.write("				},\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		$(\"#joinUser\").click(function() {\r\n");
      out.write("			location.href = \"join.jsp\";\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		//메일 중복체크\r\n");
      out.write("		function mailCheck(mail) {\r\n");
      out.write("\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type : \"POST\",\r\n");
      out.write("				url : \"/mailCheck\",\r\n");
      out.write("				async : false,\r\n");
      out.write("				data : {\r\n");
      out.write("					\"user_email\" : mail\r\n");
      out.write("				},\r\n");
      out.write("				cache : false,\r\n");
      out.write("				success : function(data) {\r\n");
      out.write("					if (data.check == \"success\") {\r\n");
      out.write("						console.log(\"로그인 실행중\");\r\n");
      out.write("\r\n");
      out.write("						login = loginByKakao(mail);\r\n");
      out.write("						console.log(login);\r\n");
      out.write("\r\n");
      out.write("						if (login == \"true\") {\r\n");
      out.write("							console.log(\"로그인 성공\");\r\n");
      out.write("							location.href = \"index\";\r\n");
      out.write("						}\r\n");
      out.write("					} else {\r\n");
      out.write("						console.log(\"로그인 실패\");\r\n");
      out.write("					}\r\n");
      out.write("				},\r\n");
      out.write("				error : function(request, status) {\r\n");
      out.write("					alert(\"오류가 발생했습니다.\")\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		//이메일로 로그인 \r\n");
      out.write("		function loginByKakao(mail) {\r\n");
      out.write("\r\n");
      out.write("			var login = \"\";\r\n");
      out.write("\r\n");
      out.write("			console.log(\"카카오 이메일로 로그인 시도\");\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type : \"POST\",\r\n");
      out.write("				url : \"/loginByKakao\",\r\n");
      out.write("				async : false,\r\n");
      out.write("				data : {\r\n");
      out.write("					\"user_email\" : mail\r\n");
      out.write("				},\r\n");
      out.write("				cache : false,\r\n");
      out.write("				success : function(data) {\r\n");
      out.write("					if (data.check == \"success\") {\r\n");
      out.write("						console.log(\"true return\");\r\n");
      out.write("						login = \"true\";\r\n");
      out.write("					} else {\r\n");
      out.write("						login = \"false\";\r\n");
      out.write("					}\r\n");
      out.write("				},\r\n");
      out.write("				error : function(request, status) {\r\n");
      out.write("					alert(\"오류가 발생했습니다.\")\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("			});\r\n");
      out.write("			return login;\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
